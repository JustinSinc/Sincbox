## /etc/nginx/nginx.conf
# nginx config file for rtmp relay and hls streaming
# requires nginx-rtmp-module (https://github.com/arut/nginx-rtmp-module)
# requires ngx-fancyindex (https://github.com/aperezdc/ngx-fancyindex)

##  example certbot command to generate dhparams and letsencrypt certs for this site
# $ sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# $ wget https://dl.eff.org/certbot-auto && chmod a+x certbot-auto

# run nginx as the www-data user
user www-data;

# spawn one worker per cpu thread
worker_processes auto;

# set pidfile
pid /run/nginx.pid;

# set number of connections per worker
events {
	worker_connections 768;
}

# webserver for stream playback
http {
	# limit simultaneous connections to protect against slowloris attacks
	limit_conn_zone $binary_remote_addr zone=addr:10m;
	limit_conn addr 64;

	# tell nginx what sort of content we'll be displaying
	include mime.types;
	default_type application/octet-stream;

	# handle file copying in kernelspace
	sendfile on;

	# delay sending packets until full
	tcp_nopush on;

	# enable asynchronous io
	aio on;

	# let nginx handle caching, instead of the os
	directio 512;

	# redirect all non-HTTPS requests to HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name watch.seednode.co watch.seedno.de;
		return 301 https://watch.seedno.de$request_uri;
	}

	# redirect https://watch.seednode.co/ to https://watch.seedno.de/
	server {
		server_name watch.seednode.co;
		include /etc/nginx/conf.d/shared.conf;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/watch.seednode.co/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/watch.seednode.co/privkey.pem;

		# rewrite url
		return 301 https://watch.seedno.de$request_uri;
	}

	# listens for requests to https://watch.seedno.de/
	server {
		server_name watch.seedno.de;
		include /etc/nginx/conf.d/shared.conf;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/watch.seedno.de/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/watch.seedno.de/privkey.pem;

		# enable fancy indexing
		fancyindex on;
		fancyindex_exact_size off;

		# don't index files ending in .html
		fancyindex_ignore .html .log;

		# serve hls.js player for web playback
		location / {
			# restrict access
			auth_basic "Authentication required";
			auth_basic_user_file /etc/nginx/.htpasswd;
			
			# hide .html extension
			rewrite ^(/.*)\.html(\?.*)?$ $1$2 permanent;

			# try serving the hls stream; otherwise display directory index
			try_files $uri/index.html $uri/ $uri =404;

			# operate out of this directory
			root /var/www/html;
		}
	}
}

# listener for incoming rtmp feeds
rtmp {
	server {
		# listen on the default port
		listen 1935;

		# send 500ms chunks of video
		chunk_size 4096;

		# create an application named `live`
		application live {
			# enables one-to-many broadcasting
			live on;

			# enables http live streaming
			hls on;

			# sets path for hls fragments and playslists
			hls_path /var/www/html/live/;

			# place streams in their own subdirectories
			hls_nested on;

			# allow stream resumption in the case of brief network loss
			hls_continuous on;

			# align fragment slicing to timestamps to allow reproducible fragmentation
			hls_fragment_slicing aligned;

			# send half-second fragments of video
			hls_fragment 500ms;

			# do not remove old fragments and playlists; we need those for the vods
			hls_cleanup off;

			# set playlist length
			hls_playlist_length 6h;

			# generate an index file for the stream
			exec_publish /usr/bin/hls-playlist $name;

			# create an hls.js player for the stream
			exec_publish_done /usr/bin/hls-livestream $name;

			# allow streaming from my subnets
			include conf.d/streamhosts.conf;
			deny publish all;

			# only allow playback via hls
			deny play all;
		}
	}
}
