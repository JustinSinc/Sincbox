# /etc/nginx/nginx.conf
# a basic nginx config file
# for use as a bitwarden reverse proxy
# with bitwarden-rs (https://github.com/mprasil/bitwarden_rs)

## bitwarden will: ##
# - run as an unprivileged docker container
# - restart on system reboot

## bitwarden will *not*: ##
# - allow the creation of new users through the web-UI
# - allow users to invite new users
# - display password hints

## install process ##
# create the data folder
# $ sudo mkdir -p /bw-data

# launch bitwarden-rs
# $ sudo docker run -d	--name bitwarden \
#						--restart always \
#						--user 1001 \
#						-e DOMAIN=https://<your_domain_here> \
#						-e WEBSOCKET_ENABLED=true \
#						-e SIGNUPS_ALLOWED=false \
#						-e INVITATIONS_ALLOWED=false \
#						-e SHOW_PASSWORD_HINT=false \
#						-e LOG_FILE=/data/bitwarden.log \
#						-e ROCKET_PORT=8080 \
#						-v /bw-data/:/data/ \
#						-p 8080:8080 \
#						-p 3012:3012 \
#						mprasil/bitwarden:latest

## updating bitwarden ##
# pull the latest version of the container
# $ docker pull mprasil/bitwarden:latest
# stop the existing container
# $ docker stop bitwarden
# remove the existing container
# $ docker rm bitwarden
# then run the launch command again

## example certbot command to generate dhparams and letsencrypt certs for this site
# $ sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# $ wget https://dl.eff.org/certbot-auto && chmod a+x certbot-auto

# run nginx as unprivileged user www-data
user www-data; 

# set the number of workers equal to the cpu count
worker_processes auto;

# set the maximum number of simultaneous connections
events {
	worker_connections 768;
}

# configuration for the web server itself
http {
	# use proxy errors instead of backend
	proxy_intercept_errors on;

	# disable maximum file upload size, for high-resolution photos
	client_max_body_size 0;

	# limit simultaneous connections to protect against slowloris attacks
	limit_conn_zone $binary_remote_addr zone=addr:10m;
	limit_conn addr 64;
	
	# cache by hostname and uri pair
	proxy_cache_key "$scheme$request_method$host$request_uri";

	# only cache these http methods
	proxy_cache_methods GET HEAD;

	# extend proxy timeout time to prevent issues with proxied websockets connections
	proxy_read_timeout 120s;
	proxy_send_timeout 120s;

	# tell nginx what sort of content we'll be displaying
	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# redirect all non-HTTPS requests to HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name bw.seedno.de bw.seednode.co;
		return 301 https://bw.seedno.de$request_uri;
	}

	# redirect https://bw.seednode.co/ to https://bw.seedno.de/
	server {
		server_name bw.seednode.co;
		include /etc/nginx/conf.d/shared.conf;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/bw.seednode.co/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/bw.seednode.co/privkey.pem;
	
		# rewrite url
		return 301 https://bw.seedno.de/;
	}

	# listen for requests to https://bw.seedno.de/
	server {
		server_name bw.seedno.de;
		include /etc/nginx/conf.d/shared.conf;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/bw.seedno.de/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/bw.seedno.de/privkey.pem;

		# serve bitwarden webvault
		location / {
			proxy_pass http://127.0.0.1:8080;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /notifications/hub {
			proxy_pass http://127.0.0.1:3012;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		location /notifications/hub/negotiate {
			proxy_pass http://127.0.0.1:8080;
		}
	}
}
