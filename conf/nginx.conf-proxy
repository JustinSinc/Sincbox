# /etc/nginx/nginx.conf
# a basic nginx config file to redirect requests to ports 
# for use on Sinc's container hosting service 

# designed to be run as an appliance with two network interfaces; one WAN-facing and one on a LAN with the NATed hosts which it will be proxying towards 

## example certbot command to generate dhparams and letsencrypt certs for this site
# $ sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# $ sudo certbot certonly --webroot -w /var/www/html --rsa-key-size 4096 -d seednode.co -d www.seednode.co -d bw.seednode.co --hsts --uir --agree-tos --redirect

# run nginx as unprivileged user www-data
user www-data; 

# set the number of workers equal to the cpu count
worker_processes auto;

# set the maximum number of simultaneous connections
# since this is a proxy server, this is set higher than default
events {
	worker_connections 2048;
}

# configuration for the web server itself
http {
	# use proxy errors instead of backend
	proxy_intercept_errors on;

	# disable maximum file upload size, for high-resolution photos
	client_max_body_size 0;

	# limit simultaneous connections to protect against slowloris attacks
	limit_conn_zone $binary_remote_addr zone=addr:10m;
	limit_conn addr 64;
	
	# cache by hostname and uri pair
	proxy_cache_key "$scheme$request_method$host$request_uri";

	# only cache these http methods
	proxy_cache_methods GET HEAD;

	# create proxy cache for hastebin
	proxy_cache_path /var/www/cache/haste levels=1:2 keys_zone=haste:60m max_size=300m inactive=1h;

	# create proxy cache for ghost
	proxy_cache_path /var/www/cache/ghost levels=1:2 keys_zone=ghost:60m max_size=300m inactive=24h;

	# include upstream servers from file
	include /etc/nginx/conf.d/upstream.conf;

	# extend proxy timeout time to prevent issues with proxied websockets connections
	proxy_read_timeout 120s;
	proxy_send_timeout 120s;

	# tell nginx what sort of content we'll be displaying
	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# redirect all non-HTTPS requests to HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name seednode.co www.seednode.co bw.seednode.co;
		return 301 https://$host$request_uri;
	}

	# listen for requests to https://seednode.co/ and its subdirectories
	server {
		# pull in common configs
		include conf.d/shared.conf;

		# this nginx vhost is only listening for connections to {www.}seednode.co
		server_name seednode.co www.seednode.co;

		# try serving files locally; if they don't exist, serve landing page
		location / {
			# hide .html extension
			rewrite ^(/.*)\.html(\?.*)?$ $1$2 permanent;
			
			# hide trailing slash
			rewrite ^/(.*)/$ /$1 permanent;
			
			# serve landing page
			index index.html;

			# serve landing page, requesting html document, then uri, in that order
			# otherwise 404
			try_files $uri/index.html $uri.html $uri/ $uri =404;

			# serve files from local web directory
			root /var/www/html;

			# allow caching of static files
			expires max;
		}

		location /stats/ {
			# hide .html extension
			rewrite ^(/.*)\.html(\?.*)?$ $1$2 permanent;

			# serve landing page, requesting html document, then uri, in that order
			# otherwise 404
			try_files $uri.html $uri/ $uri =404;

			# serve files from local web directory
			root /var/www/html;

			# enable fancy indexing
			fancyindex on;
			fancyindex_exact_size off;
			fancyindex_ignore .png;
		}

		location ^~ /irc/ {
			# pass requests to thelounge
			proxy_pass http://thelounge-backend/;
		
			# thelounge proxying support
			proxy_http_version 1.1;
			proxy_set_header Connection "upgrade";
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_read_timeout 1d;
		}		

		location ^~ /paste/ {
			# pass requests to hastebin
			proxy_pass http://hastebin-backend/;

			# cache static content
			proxy_cache haste;
			proxy_cache_valid 60m;
			proxy_cache_valid 404 1m;
			proxy_ignore_headers Set-Cookie;
			proxy_hide_header Set-Cookie;
			proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
			proxy_ignore_headers Cache-Control;
			add_header X-Cache-Status $upstream_cache_status;

			# rewrite path to strip /paste/
			rewrite ^/paste/(.*) /$1 break;
		}

		location ^~ /blog/ {
			# pass requests to ghost
			proxy_pass http://ghost-backend;

			# cache static content
			proxy_cache ghost;
			proxy_cache_valid 60m;
			proxy_cache_valid 404 1m;
			proxy_ignore_headers Set-Cookie;
			proxy_hide_header Set-Cookie;
			proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
			proxy_ignore_headers Cache-Control;
			add_header X-Cache-Status $upstream_cache_status;

			# ghost proxying support
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}
		
		location /gate/ {
			# pass requests to gateone
			proxy_pass http://gateone-backend;

			# require user auth
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/htpasswd.me;

			# gateone proxying support
			proxy_redirect off;
			proxy_pass_header Server;
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $http_address;
			proxy_set_header X-Scheme $scheme;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		location /tryme/ {
			# pass requests to docker container demo
			proxy_pass http://tryme-backend/;

			# gotty proxying support
			proxy_buffering off;
			proxy_redirect default;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header Host $http_host;
			proxy_cache_bypass $http_upgrade;

			# disable caches
			expires 0;
		}

		location /watchme/ {
			# pass requests to terminal broadcast
			proxy_pass http://watchme-backend/;

			# gotty proxying support
			proxy_buffering off;
			proxy_redirect default;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header Host $http_host;
			proxy_cache_bypass $http_upgrade;

			# disable caches
			expires 0;
		}

		location ~ /netdata/(?<behost>.*)/(?<ndpath>.*) {
			# require user auth
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/htpasswd.netdata;

			# netdata proxying support
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_http_version 1.1;
			proxy_pass_request_headers on;
			proxy_set_header Connection "keep-alive";
			proxy_store off;
			proxy_pass http://$behost/$ndpath$is_args$args;

			# allow gzip for netdata
			gzip on;
			gzip_proxied any;
			gzip_types *;
		}

		location ~ /netdata/(?<behost>.*) {
			# trailing slash is required
			return 301 /netdata/$behost/;
		}
	}

	server {
		# pull in common configs
		include conf.d/shared.conf;

		# this nginx vhost is only listening for connections to bw.seednode.co
		server_name bw.seednode.co;

		# allow large attachments
		client_max_body_size 128M;

		# expose this directory for letsencrypt authentication
		location /.well-known/ {
			alias /var/www/html/.well-known/;
		}

		# serve bitwarden webvault
		location / {
			proxy_pass http://bitwarden-backend;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /notifications/hub {
			proxy_pass http://bitwarden-notify;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		location /notifications/hub/negotiate {
			proxy_pass http://bitwarden-backend;
		}
	}
}
