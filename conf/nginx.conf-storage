## /etc/nginx/nginx.conf
# a basic nginx config file for file hosting
# requires nginx, php7.0-fpm, php7.0-cli, php7.0-cgi, wget
# place _h5ai in /storage

##  example certbot command to generate dhparams and letsencrypt certs for this site
# $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
# $ sudo certbot certonly --webroot -w /storage --rsa-key-size 4096 -d storage.justinsinkula.com -d storage.shitposter.io -d storage.seednode.co --must-staple --hsts --uir --agree-tos

# run nginx as the www-data user
user www-data;
worker_processes auto;

# set the maximum number of simultaneous connections
events {
	worker_connections 2048;
}

# configuration for the web server itself
http {
	# limit simultaneous connections to protect against slowloris attacks
	limit_conn_zone $binary_remote_addr zone=addr:10m;
	limit_conn addr 64;

	# create a cache on the ssd
	proxy_cache_path /webcache levels=1:2 keys_zone=ssd_cache:10m inactive=1h;
	proxy_cache_key "$scheme$request_method$host$request_uri";

	# display cache hit rate in access logs
	log_format	'$remote_addr - $remote_user [$time_local]'
			'"$request" $status $body_bytes_sent'
			'"$http_referer" "$http_user_agent" "$upstream_cache_status"';

	# set cache expiration times by content type
	map $sent_http_content_type $expires {
		default					  off;
		text/html				  epoch;
		text/css				  max;
		application/javascript	  max;
		~image/					  max;
	}

	# cache commonly-accessed files to ssd
	proxy_cache ssd_cache;
	proxy_cache_revalidate on;

	# extend proxy timeout time to prevent issues with proxied websockets connections
	proxy_read_timeout 120s;
	proxy_send_timeout 120s;

	# tell nginx what sort of content we'll be displaying
	include	   mime.types;
	default_type  application/octet-stream;
	sendfile	  on;

	# redirect all non-HTTPS requests to HTTPS
	server {
		listen 80;
		server_name storage.justinsinkula.com storage.seednode.co storage.shitposter.io;
		return 301 https://$host$request_uri;
	}

	# listen for requests to https://storage.justinsinkula.com/ and its subdirectories
	server {
		# listen on the https port
		listen 443 ssl http2;

		# disable gzip to prevent CRIME and other side-channel attacks
		gzip off;

		# this nginx vhost is listening for the storage subdomain on all my domains
		server_name storage.justinsinkula.com storage.seednode.co storage.shitposter.io;

		# set cache expiration times based on the mappings above
		expires $expires;

		# strip .html extensions
		rewrite ^(/.+)/.html$ $scheme://$host$1 permanent;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/storage.justinsinkula.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/storage.justinsinkula.com/privkey.pem;
		ssl_dhparam ssl/dhparam.pem;
		
		# disable insecure SSL implementations and ciphers
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_prefer_server_ciphers on;
		ssl_ecdh_curve secp384r1;
		ssl_ciphers 'AES256+EECDH:AES256+EDH:!aNULL';

		# disable ssl session tickets to ensure perfect forward secrecy
		ssl_session_cache shared:ssl_session_cache:10m;
		ssl_session_timeout 1m;
		ssl_session_tickets off;

		# enable http strict transport security (hsts)
		add_header Strict-Transport-Security "max-age=63072000; preload" always;

		# allow caching to disk
		add_header Cache-Control "public";
	
		# report cache status
		add_header X-Cache-Status $upstream_cache_status;

		# block clickjacking attacks
		add_header X-Frame-Options DENY;

		# disable content-type sniffing
		add_header X-Content-Type-Options nosniff;

		# force-enable cross-site scripting protection
		add_header X-XSS-Protection "1; mode=block";

		# a man is not dead while his name is still spoken
		add_header X-Clacks-Overhead "GNU Terry Pratchett" always;

		# set root directory
		root /storage;

		# error pages
		error_page 404 /custom_404.html;
		
		location = /custom_404.html {
			internal;
		}

		error_page 500 502 503 504 /custom_50x.html;

		location = /custom_50x.html {
			internal;
		}

		# require authentication
		auth_basic "Restricted access";
		auth_basic_user_file /etc/nginx/.htpasswd;

		# bypass authentication for letsencrypt validation
		location /.well-known/ {
			auth_basic "off";
		}

		# enable fancy indexing
		fancyindex on;
		fancyindex_exact_size off;
		fancyindex_ignore ^HeatherPC$ ^cdn$ ^gmn$ ^rtorrent$ ^10G.test$ ^custom ^favicon.ico$ ^torrent$;

		location / {	
		# First attempt to serve request as file, then
		# as a directory, then fall back to displaying a 404.
			try_files $uri $uri/index.html $uri.html $uri/ =404;
		}

		# serve photofloat gallery of archive
		location /gallery/ {
			rewrite ^/gallery/(.*) /$1 break;
			root /storage/photofloat/web;
			try_files $uri $uri/index.html $uri.html $uri/ index.html;
		}

		location = /10G.test {
			auth_basic "off";
		}

		# append trailing slash to /pics/ if needed
		location ~ /pics {
			rewrite ^([^.\?]*[^/])$ $1/ permanent;
		}
	
		# pass rpc requests to rutorrent
		location /RPC2 {
			include scgi_params;
			scgi_pass localhost:5000;
		}

		# require user authentication for rtorrent
		location /rtorrent/ {
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/.rtorrent;
		}

		# append trailing slash to /rtorrent/ if needed
		location /rtorrent {
			rewrite ^([^.\?]*[^/])$ $1/ permanent;
		}
	}
}
