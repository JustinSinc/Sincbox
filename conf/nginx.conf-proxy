# /etc/nginx/nginx.conf 
# a basic nginx config file to redirect requests to ports 
# for use on Sinc's container hosting service 

# designed to be run as an appliance with two network interfaces; one WAN-facing and one on a LAN with the NATed hosts which it will be proxying towards 

##  example certbot command to generate dhparams and letsencrypt certs for this site
# $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# $ wget https://dl.eff.org/certbot-auto && chmod a+x certbot-auto
# $ sudo ./certbot-auto certonly --webroot -w /var/www/html --rsa-key-size 4096 -d seednode.co -d www.seednode.co --hsts --uir --agree-tos --redirect

# run nginx as unprivileged user www-data
user www-data; 

# set the number of workers equal to the cpu count
worker_processes auto;

# set the maximum number of simultaneous connections
# since this is a proxy server, this is set higher than default
events {
	worker_connections 2048;
}

# configuration for the web server itself
http {
	# use proxy errors instead of backend
	proxy_intercept_errors on;

	# increase maximum file size for high-resolution photos
	client_max_body_size 10m;

	# limit simultaneous connections to protect against slowloris attacks
	limit_conn_zone $binary_remote_addr zone=addr:10m;
	limit_conn addr 64;

	# include upstream servers from file
	include /etc/nginx/conf.d/upstream.conf;

	# extend proxy timeout time to prevent issues with proxied websockets connections
	proxy_read_timeout 120s;
	proxy_send_timeout 120s;

	# tell nginx what sort of content we'll be displaying
	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# redirect all non-HTTPS requests to HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name seednode.co;
		return 301 https://$host$request_uri;
	}

	# listen for requests to https://seednode.co/ and its subdirectories
	server {
		# listen on the https port
		listen 443 ssl http2;
		listen [::]:443 ssl http2;

		# disable gzip to prevent CRIME and other side-channel attacks
		gzip off;

		# this nginx vhost is only listening for connections to seednode.co
		server_name seednode.co www.seednode.co;

		# strip .html extensions
		rewrite ^(/.+)/.html$ $scheme://$host$1 permanent;

		# strip trailing /index.html
		rewrite ^(.*)/index.html$ $1 permanent;

		# enable LetsEncrypt SSL certs
		ssl_certificate /etc/letsencrypt/live/seednode.co/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/seednode.co/privkey.pem;
		ssl_dhparam ssl/dhparam.pem;

		# establish a new TLS connection for upstream servers
		proxy_ssl_session_reuse off;

		# enable oscp stapling
		ssl_stapling on;
		ssl_stapling_verify on;
		resolver 8.8.8.8;

		# disable insecure SSL implementations and ciphers
		ssl_protocols TLSv1.3 TLSv1.2;
		ssl_prefer_server_ciphers on;
		ssl_ecdh_curve secp384r1;
		ssl_ciphers 'TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:EECDH+CHACHA20:AES256+EECDH:AES256+EDH:!aNULL';

		# disable ssl session tickets to ensure perfect forward secrecy
		ssl_session_cache shared:ssl_session_cache:10m;
		ssl_session_timeout 10m;
		ssl_session_tickets off;

		# honour the fallen
		add_header X-Clacks-Overhead "GNU Terry Pratchett" always;

		# enable http strict transport security (HSTS)
		add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
		
		# block clickjacking attacks
		add_header X-Frame-Options DENY;

		# disable content-type sniffing
		add_header X-Content-Type-Options nosniff;

		# force-enable cross-site scripting protection
		add_header X-XSS-Protection "1; mode=block";

		# serve files locally
		root /var/www/html/;
		try_files $uri $uri/;

		## error pages
		# 502 Bad Gateway
		# when a service goes offline
		error_page 502 /offline.html;

		location = /offline.html {
			root /var/www/html;
			internal;
		}

		# 404 Not Found 
		# when a requested resource does not exist
		error_page 404 /404.html;

		location = /404.html {
			root /var/www/html;
			internal;
		}

		# 500 Internal Server Error
		# when a server is not responding
		error_page 500 503 504 /50x.html;

		location = /50x.html {
			root /var/www/html;
			internal;
		}

		# these file types are typically static and can be cached long-term
		location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|ogg|ogv|webm|pdf)$ {
			expires 30d;
			add_header Cache-Control "public";
		}

		location = /index.html {
			# do not display the 'index.html' part of the URL
			rewrite ^ / permanent;
			
			# if no index exists, respond with a 404 error
			try_files /index.html =404;
		}

		location ~* ^/(cpu|disk|net|nginx).(html|conf)$ {
			# load files matching this pattern locally, not from landing - require password
			root /var/www/html;

			# require user auth
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/htpasswd.stats;
		}

		location ~* ^/(zalgo).(html)$ {
			# load files matching this pattern locally, not from landing - do not require password
			root /var/www/html;
		}

		# expose this directory for letsencrypt authentication
		location /.well-known/ {
			alias /var/www/html/.well-known/;
		}

		location / {
			# redirect to my landing page at seednode.co
			proxy_pass http://10.0.0.4:80/;

			# push required dependencies
			http2_push /assets/css/font-awesome.css;
			http2_push assets/css/main.css;
			http2_push /assets/css/all.css;
			http2_push /assets/css/font-awesome.min.css;
			http2_push /assets/css/smartos-icon.css;
			http2_push /assets/css/SourceSansPro.css;
			http2_push /assets/fonts/ArvoBold.ttf;
			http2_push /assets/fonts/SourceSansProSemiBold.ttf;
			http2_push /assets/fonts/fontawesome-webfont.woff2?v=4.7.0;
			http2_push /assets/fonts/SourceSansProRegular.ttf;
			http2_push /assets/fonts/SourceSansProLight.ttf;
			http2_push /favicon.ico;

			# enable http strict transport security
			add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

			# this page is static and can be cached long-term
			expires 30d;
			add_header Cache-Control "public";

			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

		location /watchme/ {
			# redirect to terminal live stream
			proxy_pass http://10.0.0.11:1338/;

                        # websockets support
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection "Upgrade";
                        proxy_set_header Host $http_host;
                        proxy_cache_bypass $http_upgrade;

                        # disable proxy buffering
                        proxy_buffering off;
                        proxy_redirect default;

                        # disable caches
                        expires 0;
	
			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

#		location /cards/ {
#			# redirect to pretendyourexyzz docker host
#			proxy_pass http://10.0.0.11:8080/;
#
#			# websockets support
#			proxy_http_version 1.1;
#			proxy_set_header Upgrade $http_upgrade;
#			proxy_set_header Connection "Upgrade";
#			proxy_set_header Host $http_host;
#			proxy_cache_bypass $http_upgrade;
#
#			# disable proxy buffering
#			proxy_buffering off;
#			proxy_redirect default;
#
#			# disable caches
#			expires 0;
#
#			# a man is not dead while his name is still spoken
#			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
#		}

		location /tryme/ {
			# redirect to docker container demo
			proxy_pass http://10.0.0.11:1337/;

                        # websockets support
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection "Upgrade";
                        proxy_set_header Host $http_host;
                        proxy_cache_bypass $http_upgrade;

                        # disable proxy buffering
                        proxy_buffering off;
                        proxy_redirect default;

                        # disable caches
                        expires 0;

			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

		location /gate/ {
			# require user auth
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/htpasswd.me;

			# pass requests on to the terminal gateway
			proxy_pass http://10.0.0.8:80;

			# websockets support
			proxy_redirect off;
			proxy_pass_header Server;
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $http_address;
			proxy_set_header X-Scheme $scheme;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";

			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}
		
		location ^~ /paste/ {
			# rewrite path to strip /paste/
			rewrite ^/paste/(.*) /$1 break;

			# pass requests to hastebin
			proxy_pass http://10.0.0.6:7777/;

			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

		location ^~ /blog/ {
			# pass requests to ghost
			proxy_pass http://10.0.0.7:80;

			# websockets support
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header Host $http_host;
			proxy_cache_bypass $http_upgrade;
			proxy_buffering off;
			proxy_redirect off;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_read_timeout 900;

			# disable caches
			expires 0;
		
			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

		location ~ /stats/(?<behost>.*)/(?<ndpath>.*) {
			# support for proxied netdata
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_http_version 1.1;
			proxy_pass_request_headers on;
			proxy_set_header Connection "keep-alive";
			proxy_store off;
			proxy_pass http://$behost/$ndpath$is_args$args;

			# require user auth
			auth_basic "Restricted access";
			auth_basic_user_file /etc/nginx/htpasswd.stats;

			# allow gzip for netdata
			gzip on;
			gzip_proxied any;
			gzip_types *;
			
			# a man is not dead while his name is still spoken
			add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
		}

		location ~ /stats/(?<behost>.*) {
			# trailing slash is required
			return 301 /stats/$behost/;
		}
	}
}
