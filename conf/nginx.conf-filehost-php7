# a basic nginx config file for file hosting
# requires nginx, php7.0-fpm, php7.0-cli, php7.0-cgi, wget
# place _h5ai in /var/www/html/

##  example certbot command to generate dhparams and letsencrypt certs for this site
# $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
# $ sudo certbot certonly --webroot -w /var/www/html --rsa-key-size 4096 -d storage.justinsinkula.com -d storage.shitposter.io -d storage.seednode.co --must-staple --hsts --uir --agree-tos

# run nginx as the www-data user
user www-data;
worker_processes  2;

# set the maximum number of simultaneous connections
# since this is a proxy server, this is set higher than default
events {
    worker_connections  2048;
}

# configuration for the web server itself
http {

    # extend proxy timeout time to prevent issues with proxied websockets connections
    proxy_read_timeout 120s;
    proxy_send_timeout 120s;

    # tell nginx what sort of content we'll be displaying
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    # redirect all non-HTTPS requests to HTTPS
    server {
        listen 80;
        server_name storage.justinsinkula.com storage.seednode.co storage.shitposter.io;
        return 301 https://$host$request_uri;
    }

    # listen for requests to https://storage.justinsinkula.com/ and its subdirectories
    server {
        # listen on the https port
        listen       443;

        # disable gzip to prevent CRIME and other side-channel attacks
        gzip off;

        # this nginx vhost is listening for the cdn subdomain on all my domains
        server_name storage.justinsinkula.com storage.seednode.co storage.shitposter.io;

        # strip .html extensions
        rewrite ^(/.+)/.html$ $scheme://$host$1 permanent;

        # enable LetsEncrypt SSL certs
        ssl on;
        ssl_certificate /etc/letsencrypt/live/storage.justinsinkula.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/storage.justinsinkula.com/privkey.pem;
        ssl_dhparam ssl/dhparam.pem;

        # disable insecure SSL implementations and ciphers
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ecdh_curve secp384r1;
        ssl_ciphers 'AES256+EECDH:AES256+EDH:!aNULL';

        # disable ssl session tickets to ensure perfect forward secrecy
        ssl_session_cache shared:ssl_session_cache:10m;
        ssl_session_timeout 1m;
        ssl_session_tickets off;

        # enable http strict transport security (hsts)
        add_header Strict-Transport-Security "max-age=63072000; preload" always;

        # enable OSCP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # block clickjacking attacks
        add_header X-Frame-Options DENY;

        # disable content-type sniffing
        add_header X-Content-Type-Options nosniff;

        # force-enable cross-site scripting protection
        add_header X-XSS-Protection "1; mode=block";

	# set root directory
        root /var/www/html;

        # error pages
        error_page 404 /custom_404.html;

        location = /custom_404.html {
                internal;
        }

        error_page 500 502 503 504 /custom_50x.html;

        location = /custom_50x.html {
                internal;
        }

        # set index
        index index.php index.html index.htm /_h5ai/public/index.php;

        # serve files located in /var/www/html
        location / {
				# require login credentials
                auth_basic "Restricted access";
                auth_basic_user_file .htpasswd;
				
                # First attempt to serve request as file, then
                # as a directory, then fall back to displaying a 404.
                try_files $uri $uri/index.html $uri.html $uri/ =404;
        }

        # php-fpm configuration
        location ~ \.php$ {
                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
                include fastcgi_params;
        }
    }
}
